// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("user")

  sessions    Session[]
  days        Day[]
  tokens      Token[]
  goals       UserGoals[]
  BodyMetrics BodyMetrics[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
}

enum GoalType {
  CEILING
  FLOOR
  EXACT
}

model UserGoals {
  id   Int  @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])

  foodCalories   Int @default(2300)
  foodProtein    Int @default(150)
  foodCarbs      Int @default(250)
  foodFat        Int @default(100)
  caloriesBurned Int @default(3000)

  caloriesBurnedType GoalType @default(FLOOR)
  foodCaloriesType   GoalType @default(CEILING)
  foodProteinType    GoalType @default(FLOOR)
  foodCarbsType      GoalType @default(CEILING)
  foodFatType        GoalType @default(CEILING)

  completed Boolean @default(false)

  userId Int
  days   Day[]
}

model BodyMetrics {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  date              DateTime
  weightInKilograms Float

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Day {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime

  //************ DEPRECATED FIELDS ***************//
  cardioType   String? // activeCalories | steps
  cardioCount  Int     @default(0)
  strengthDone Boolean @default(false)
  strengthType String?
  //*********************************************//

  foodCalories Int @default(0)
  foodProtein  Int @default(0)
  foodCarbs    Int @default(0)
  foodFat      Int @default(0)

  caloriesBurned Int @default(0)

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  goals       UserGoals @relation(fields: [userGoalsId], references: [id])
  userGoalsId Int

  @@unique([userId, date], name: "uniqueDatePerUser")
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}
